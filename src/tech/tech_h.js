import { saveMessage, getUserData } from '../assistant/assistant_db';
import { sendMessage, deleteMessage } from '../utils/utils';
import { getUserRole } from '../utils/access';

// 1. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID
export async function handleIdCommand(env, TELEGRAM_URL, message) {
	let reply;

	if (message.reply_to_message && message.reply_to_message.sticker) {
		reply = `üñº ID —Å—Ç—ñ–∫–µ—Ä–∞: \`${message.reply_to_message.sticker.file_id}\``;
	} else {
		reply = `ü™™ –í–∞—à Telegram ID: \`${message.from.id}\``;
	}

	await sendMessage(TELEGRAM_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
	await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}

// 2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
export async function handleBroadcastCommand(env, TELEGRAM_URL, message) {
	try {
		const senderID = message.from.id;
		const role = await getUserRole(env.DB, senderID);
		const isOwner = senderID === parseInt(env.OWNER_ID);

		if (role !== 'admin' && !isOwner) {
			return await sendMessage(TELEGRAM_URL, message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.');
		}

		const args = message.text.split(' ');
		if (args.length < 3) {
			return await sendMessage(TELEGRAM_URL, message.chat.id, '‚ö† –§–æ—Ä–º–∞—Ç: /broadcast <user_id –∞–±–æ "all"> <message>');
		}

		const target = args[1];
		const broadcastText = args.slice(2).join(' ').trim();
		if (!broadcastText) {
			return await sendMessage(TELEGRAM_URL, message.chat.id, '‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
		}

		const broadcastMessage = `üì¢ *–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó:*\n\n${broadcastText}`;

		if (target.toLowerCase() === 'all') {
			const { results } = await env.DB.prepare('SELECT user_id FROM user_data').all();

			if (!results.length) {
				return await sendMessage(TELEGRAM_URL, message.chat.id, '‚ö† –£ –±–∞–∑—ñ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏.');
			}

			for (const user of results) {
				await sendMessage(TELEGRAM_URL, user.user_id, broadcastMessage, { parse_mode: 'Markdown' });
				await new Promise((resolve) => setTimeout(resolve, 500));
			}

			return await sendMessage(TELEGRAM_URL, message.chat.id, `‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ *${results.length}* –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.`, {
				parse_mode: 'Markdown',
			});
		} else {
			await sendMessage(TELEGRAM_URL, target, broadcastMessage, { parse_mode: 'Markdown' });
			return await sendMessage(TELEGRAM_URL, message.chat.id, '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.');
		}
	} catch (error) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –≤ handleBroadcastCommand:', error);
		return await sendMessage(TELEGRAM_URL, message.chat.id, '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑—Å–∏–ª—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.');
	}
}

// 3. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞—Ä—Ç—É
export async function handleStartCommand(env, TELEGRAM_URL, message) {
	const chatId = message.chat.id;
	const command = 'start';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è /start:', error);
		}
	}

	const userData = (await getUserData(env.DB, message.from.id)) || {};
	const userName = userData.first_name || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á';
	const reply = `–ü—Ä–∏–≤—ñ—Ç, ${userName}! üëã\n\n–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –§–ª—é–∫—Å—ñ. –û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂—á–µ, –∞–±–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—ñ–ª–∫—É–π—Å—è –∑—ñ –º–Ω–æ—é.`;

	const keyboard = {
		inline_keyboard: [
			[
				{
					text: 'üåê –í–µ–±—Å–∞–π—Ç',
					url: 'https://fluxie.pp.ua',
				},
				{ text: '‚ùì –î–æ–ø–æ–º–æ–≥–∞', callback_data: 'help' },
			],
			[
				{
					text: 'üá∫üá¶ –ù–∞ –ó–°–£',
					url: 'https://savelife.in.ua/projects/status/active/',
				}
			]
		],
	};

	const sentMessage = await sendMessage(TELEGRAM_URL, chatId, reply, {
		reply_markup: JSON.stringify(keyboard),
	});

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	await deleteMessage(TELEGRAM_URL, chatId, message.message_id);
}

// 4. –§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏
export async function handleHelpCommand(env, TELEGRAM_URL, message, shouldDeleteOriginalMessage = true) {
	const chatId = message.chat.id;
	const command = 'help';
	const previousRecord = await env.DB.prepare('SELECT message_id FROM bot_messages WHERE chat_id = ? AND command = ?')
		.bind(chatId, command)
		.first();

	if (previousRecord && previousRecord.message_id) {
		try {
			await deleteMessage(TELEGRAM_URL, chatId, previousRecord.message_id);
		} catch (error) {
			console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /help:', error);
		}
	}

	const keyboard = {
		inline_keyboard: [
			[
				{ text: 'üöÄ –û—Å–Ω–æ–≤–Ω—ñ', callback_data: 'help_main' },
				{ text: 'üí† –®–Ü', callback_data: 'help_ai' },
			],
			[
				{ text: 'üìù –ó–∞–≤–¥–∞–Ω–Ω—è', callback_data: 'help_tasks' },
				{ text: 'üéØ –¶—ñ–ª—ñ', callback_data: 'help_streaks' },
			],
			[{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'help_stats' }],
		],
	};

	const reply = `‚úª *–í—ñ—Ç–∞—é!* –Ø –§–ª—é–∫—Å—ñ, —ñ –≤–º—ñ—é –±–∞–≥–∞—Ç–æ —á–æ–≥–æ.

	üì≤ _–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –ø–æ –∫–æ–º–∞–Ω–¥—ñ._`;

	const sentMessage = await sendMessage(TELEGRAM_URL, chatId, reply, {
		parse_mode: 'Markdown',
		reply_markup: JSON.stringify(keyboard),
	});

	await env.DB.prepare('INSERT OR REPLACE INTO bot_messages (chat_id, command, message_id) VALUES (?, ?, ?)')
		.bind(chatId, command, sentMessage.message_id)
		.run();

	if (shouldDeleteOriginalMessage && message.message_id) {
		await deleteMessage(TELEGRAM_URL, chatId, message.message_id);
	}
}

export async function handleSettingsCommand(env, TELEGRAM_URL, message) {
	const userId = message.from.id;
	const userData = await env.DB.prepare('SELECT * FROM users WHERE id = ?').bind(userId).first();
	const userDB = await getUserData(env.DB, userId);
	const userName = userDB?.first_name || '–ù–µ–≤—ñ–¥–æ–º–∏–π';
	const isOwner = userId === parseInt(env.OWNER_ID);
	const registrationDate = isOwner ? '‚àû‚àû:‚àû‚àû' : (userData?.registration_date || '–î–∞—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—è');
	const stats = await env.DB.prepare('SELECT * FROM user_stats WHERE user_id = ?').bind(userId).first();
	const textStats = stats?.text_requests || 0;
	const imageGenStats = stats?.generated_images || 0;
	const imageRecStats = stats?.recognized_images || 0;

	const roleFromDb = userData?.role;
	const roleLabel = isOwner || roleFromDb === 'admin' ? '–ê–¥–º—ñ–Ω' : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';

	const settingsMessage =
		`üõ† *–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:*\n\n` +
		`üë§ –Ü–º'—è: ${userName}\n` +
		`üÜî ID: \`${userId}\`\n` +
		`üìÖ –î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ${registrationDate}\n` +
		`üîê –†–æ–ª—å: *${roleLabel}*\n\n` +
		`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n` +
		`üìù –¢–µ–∫—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: ${textStats}\n` +
		`üé® –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${imageGenStats}\n` +
		`üñº –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö —Ñ–æ—Ç–æ: ${imageRecStats}`;

	await sendMessage(TELEGRAM_URL, message.chat.id, settingsMessage, { parse_mode: 'Markdown' });
}
