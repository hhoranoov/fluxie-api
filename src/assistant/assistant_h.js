import { deleteChatHistory, saveMessage, saveUserData } from '../assistant/assistant_db';
import { checkServicesAvailability } from '../assistant/assistant';
import { sendMessage } from '../utils/utils';

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
export async function handleStatusCommand(env, TELEGRAM_URL, message) {
  const status = await checkServicesAvailability();
  const reply = `
üîç *–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤*

‚Ä¢ *–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É:* ${status.textGeneration ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
‚Ä¢ *–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:* ${status.imageGeneration ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}
‚Ä¢ *–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å:* ${status.imageRecognition ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

_–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞–ª–µ–∂–Ω–∏–º —á–∏–Ω–æ–º._
  `.trim();

  await sendMessage(TELEGRAM_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
  await saveMessage(env.DB, message.from.id, message.chat.id, 'bot', reply);
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
export async function handleClearCommand(db, TELEGRAM_URL, message) {
  const result = await deleteChatHistory(db, message.chat.id);
  await sendMessage(TELEGRAM_URL, message.chat.id, result.message);
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
export async function handleSetDataCommand(db, TELEGRAM_URL, message) {
  const data = message.text.substring(8).trim();
  if (!data) {
    const reply = 'üìÉ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É.';
    await sendMessage(TELEGRAM_URL, message.chat.id, reply);
    return;
  }
  await saveUserData(db, message.from.id, data);
  const reply = `üéâ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ: \`${data}\``;
  await sendMessage(TELEGRAM_URL, message.chat.id, reply, { parse_mode: 'Markdown' });
  await saveMessage(db, message.from.id, message.chat.id, 'bot', reply);
}
